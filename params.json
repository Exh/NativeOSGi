{"name":"Native-OSGi","body":"### Introduction\r\n\r\n\r\nThe Native OSGi project is a collaborative effort to write, test, and implement the Java OSGi\r\nspecifications in C and C++ with a focus on interoperability between C, C++ and Java.\r\n\r\n### Rationale for a native OSGi API\r\n\r\n - C and C++ as programming languages are here to stay (whether you like it or not).\r\n - Traditional application domains (for example in medical imaging, embedded devices, sensor networks, etc.)\r\n   often use native languages and possibly rely on a large native (legacy) code-base.\r\n - Native developers designing scalable, modular platforms for a dynamically reconfigurable (embedded)\r\n   environment need a light-weight yet powerful module system (just like Java developers).\r\n\r\n### Benefits of a native OSGi framework\r\n\r\n - Builds upon a mature API design for a dynamic environment, supporting native developers in creating\r\n   modular platforms.\r\n - Allows the creation of a hybrid Java and C/C++ architecture (via remote services) as an alternative to JNI.\r\n - Maximizes the performance per watt ratio for (embedded) devices.\r\n - Eases future software migrations of native components to a Java OSGi-based system.\r\n","tagline":"","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}